apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

apply plugin: "androidx.navigation.safeargs"

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.example.gilgoldzweig.movies"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        buildConfigField "String", "TMDB_API_KEY", "\"${getProperty("local.properties", "tmdb_api_key")}\""

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    //Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    //Android
    implementation "com.android.support:appcompat-v7:$support"
    implementation "com.android.support:design:$support"
    implementation "com.android.support:support-v4:$support"
    implementation "com.android.support:recyclerview-v7:$support"
    implementation "com.android.support:cardview-v7:$support"
    implementation "android.arch.navigation:navigation-fragment-ktx:$navigation"
    implementation "android.arch.navigation:navigation-ui-ktx:$navigation"
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation "android.arch.paging:runtime:1.0.1"
    implementation "android.arch.lifecycle:extensions:1.1.1"

    //Networking
    implementation "com.squareup.retrofit2:retrofit:$retrofit"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofit"

    //DB
    implementation "android.arch.persistence.room:runtime:$room"
    implementation "android.arch.persistence.room:rxjava2:$room"
    implementation 'com.android.support:support-v4:28.0.0'
    kapt "android.arch.persistence.room:compiler:$room"

    //Reactive
    implementation 'io.reactivex.rxjava2:rxjava:2.1.12'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.2'

    //Dependency injection
    implementation "com.google.dagger:dagger:$dagger"
    kapt "com.google.dagger:dagger-compiler:$dagger"

    //Json
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin:2.9.5'
    implementation 'com.squareup.retrofit2:converter-jackson:2.3.0'

    //Performance
    implementation 'com.github.anrwatchdog:anrwatchdog:1.3.0'
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$leak_canery"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android:$leak_canery"

    //Utilities
    implementation "com.github.GilGoldzweig.kotlinify:core:$kotlinify"
    implementation "com.github.GilGoldzweig.kotlinify:reactive:$kotlinify"
    implementation "org.jetbrains.anko:anko:$anko"

    //UI
    implementation "com.github.gilgoldzweig.Gencycler:annotations:$gencycler"
    implementation "com.github.bumptech.glide:glide:$glide"
    implementation("com.github.bumptech.glide:recyclerview-integration:$glide") {
        // Excludes the support library because it's already included by Glide.
        transitive = false
    }
    implementation("com.mikepenz:materialdrawer:6.0.9@aar") { transitive = true }
    kapt "com.github.gilgoldzweig.Gencycler:compiler:$gencycler"
    kapt "com.github.bumptech.glide:compiler:$glide"

    //Tests
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

}


def getProperty(String filename, String propName) {
    def propsFile = rootProject.file(filename)
    if (propsFile.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        if (props[propName] != null) {
            return props[propName]
        } else {
            print("No such property " + propName + " in file " + filename);
        }
    } else {
        print(filename + " does not exist!")
    }
}
